'''
Create a Manhattan plot for PheWAS results (refer to the R package)
The results are generated by PheWAS::phewas() and PheWAS::addPhecodeInfo() to add phecode details
Example call:
python phewas_manhattan_plot.py \
--input_file /data100t1/home/wanying/BioVU/202505_hypophosphatasia/output/phewas/phewas.EUR.Whole_Blood.txt \
--pvalue-col p \
--phenotype-col description \
--beta-col beta \
--category-col group \
--title plot_title \
--output phewas_manhattan_plot.png
'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Optional, List, Union
import argparse
import sys
from matplotlib.lines import Line2D
from adjustText import adjust_text

def create_manhattan_plot(
    data: pd.DataFrame,
    pvalue_col: str = 'p',
    phenotype_col: str = 'phenotype',
    beta_col: Optional[str] = None,
    category_col: Optional[str] = None,
    significance_threshold: float = None,
    suggestive_threshold: float = 0.05,
    title: str = 'PheWAS Manhattan Plot',
    figsize: tuple = (15, 6),
    colors: Optional[List[str]] = None,
    save_path: str = 'phewas_manhattan_plot.png'
) -> None:
    """
    Create a Manhattan plot for PheWAS results.
    
    Parameters
    ----------
    data : pd.DataFrame
        DataFrame containing PheWAS results
    pvalue_col : str, optional
        Column name containing p-values, by default 'p_value'
    phenotype_col : str, optional
        Column name containing phenotype names, by default 'phenotype'
    beta_col : str, optional
        Column name containing beta values, by default None
    category_col : str, optional
        Column name for phenotype categories, by default None
    significance_threshold : float, optional
        Genome-wide significance threshold, by default 5e-8
    suggestive_threshold : float, optional
        Suggestive significance threshold, by default 1e-5
    title : str, optional
        Plot title, by default 'PheWAS Manhattan Plot'
    figsize : tuple, optional
        Figure size (width, height), by default (12, 6)
    colors : List[str], optional
        List of colors for different categories, by default None
    save_path : str, optional
        Path to save the plot, by default 'phewas_manhattan_plot.png'

    Returns:
    - plot_data: dataframe used to create the plot
    - fig, ax: figure and axes

    """
    if not significance_threshold:
        significance_threshold=suggestive_threshold/len(data)

    # Create a copy of the data
    plot_data = data.copy()
    
    # Calculate -log10(p-value)
    plot_data['-log10_p'] = -np.log10(plot_data[pvalue_col])
    
    # Sort by phenotype and group
    plot_data = plot_data.sort_values(by=[category_col, phenotype_col])
    
    # Create x-axis positions
    plot_data['x_pos'] = range(len(plot_data))
    
    # Set up the plot
    fig, ax = plt.subplots(figsize=figsize)
    
    # Plot points
    if category_col is not None: # Need to aggragate by phecode group
        if colors is None:
            colors= sns.color_palette(palette='Set2',
                                      n_colors=len(plot_data[category_col].unique()))
            
        # Plot each group using different color
        x_tick_labels, x_tick_pos = [], []
        for i, (group, df) in enumerate(plot_data.groupby(category_col)):
            if not beta_col:
                ax.scatter(df['x_pos'], df['-log10_p'], color=colors[i])
            else: # If need to use different to indicate sign of beta
                mask = df[beta_col]>0
                ax.scatter(df.loc[mask, 'x_pos'],
                           df.loc[mask, '-log10_p'],
                           color=colors[i], marker='^')
                ax.scatter(df.loc[~mask, 'x_pos'],
                           df.loc[~mask, '-log10_p'],
                           color=colors[i], marker='v')
            x_tick_labels.append(group)
            x_tick_pos.append(df['x_pos'].mean())
        # Add x-axis tick labels and positions
        ax.set_xticks(x_tick_pos)
        ax.set_xticklabels(x_tick_labels, rotation=45, ha='right')
        # Add legend
        lines = [Line2D([0], [0], color='grey', ls='', marker='^', label='Positive beta'),
                 Line2D([0], [0], color='grey', ls='', marker='v', label='Negative beta')]
        ax.legend(handles=lines, loc='upper right', frameon=False)
    else:
        # Just plot averthing together
        ax.scatter(plot_data['x_pos'], plot_data['-log10_p'], color=colors[0])
    # Annotate the significant phecodes
    mask = plot_data[pvalue_col]<significance_threshold
    if len(plot_data[mask])>0:
        phecodes_to_plot = plot_data[mask]
    else: # Else plot the top 5 phecodes by p value
        phecodes_to_plot = plot_data.sort_values(by=pvalue_col).head(5)
    annot = [] # fot adjust text later
    for _, row in phecodes_to_plot.iterrows():
        annot.append(ax.annotate(text=row[phenotype_col],
                     xy=(row['x_pos'], row['-log10_p']),
                     textcoords='offset points',
                     xytext=(0,10), ha='center', fontsize=8))
    
    # Add significance thresholds
    ax.axhline(y=-np.log10(significance_threshold), color='red', linestyle='--', alpha=0.5)
    ax.axhline(y=-np.log10(suggestive_threshold), color='orange', linestyle='--', alpha=0.5)
    
    ax.set_xlabel('Phenotypes', fontsize=12)
    ax.set_ylabel('-log10(p-value)', fontsize=12)
    ax.set_title(title, fontsize=14, pad=20)
    # Adjust layout
    fig.tight_layout()
    # adjust_text(annot, avoid_self=False,max_move=(5, 1),
    #             force_text= (0.05, 0.2),force_pull=(0.05, 0.01))

    # Save the plot
    fig.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Plot saved to: {save_path}")
    return plot_data, fig, ax

def parse_arguments():
    """
    Parse command line arguments.
    
    Returns
    -------
    argparse.Namespace
        Parsed command line arguments
    """
    parser = argparse.ArgumentParser(description='Create a Manhattan plot for PheWAS results')
    
    # Required arguments
    parser.add_argument('--input_file', type=str,
                        help='Path to input CSV file containing PheWAS results')
    
    # Optional arguments
    parser.add_argument('--pvalue-col', type=str, default='p',
                      help='Column name containing p-values (default: p)')
    parser.add_argument('--phenotype-col', type=str, default='phenotype',
                      help='Column name containing phenotype names (default: phenotype)')
    parser.add_argument('--beta-col', type=str, default=None,
                      help='Column name containing beta values (optional)')
    parser.add_argument('--category-col', type=str, default=None,
                      help='Column name for phenotype categories/groups (optional)')
    parser.add_argument('--significance-threshold', type=float, default=None,
                      help='Genome-wide significance threshold (default: suggestive/n_rows)')
    parser.add_argument('--suggestive-threshold', type=float, default=0.05,
                      help='Suggestive significance threshold (default: 0.05)')
    parser.add_argument('--title', type=str, default='PheWAS Manhattan Plot',
                      help='Plot title (default: PheWAS Manhattan Plot)')
    parser.add_argument('--width', type=int, default=12,
                      help='Plot width in inches (default: 12)')
    parser.add_argument('--height', type=int, default=6,
                      help='Plot height in inches (default: 6)')
    parser.add_argument('--output', type=str, default='phewas_manhattan_plot.png',
                      help='Path to save the plot (default: phewas_manhattan_plot.png)')
    
    return parser.parse_args()

def main():
    """
    Main function to handle both command line and example usage.
    """
    args = parse_arguments()
    cmd_used = 'python phewas_manhattan_plot.py'
    for arg in vars(args):
        cmd_used += f"--{arg} {getattr(args, arg)}"
    print(f"Command used: {cmd_used}")

    # Read input data
    print(f"# Reading phewas results from: {args.input_file}")
    if args.input_file.endswith('.csv'):
        data = pd.read_csv(args.input_file)
    else: # assume tsv
        data = pd.read_csv(args.input_file, sep='\t')
    
    print(f"# - Data shape: {data.shape}")
    print(f'# - Data columns: {data.columns}')
    print(f"# - Data head: {data.head()}")

    # Create Manhattan plot
    create_manhattan_plot(
        data=data,
        pvalue_col=args.pvalue_col,
        phenotype_col=args.phenotype_col,
        beta_col=args.beta_col,
        category_col=args.category_col,
        significance_threshold=args.significance_threshold,
        suggestive_threshold=args.suggestive_threshold,
        title=args.title,
        figsize=(args.width, args.height),
        save_path=args.output
    )

if __name__ == '__main__':
    main()
