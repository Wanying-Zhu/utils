# Modified from 03-2_combine_prs_of_all_chr.py
# Process weighted dosage generated by get_weighted_dosage.py
# Calcualte PRS by combining weighted dosage of chromosomes from a single phenotype
# Combine PRS of chromosomes

'''
ancestry=EUR; pheno=HDL; method=PT
python /data100t1/home/wanying/BioVU/202405_PAGE_PRS/code/04_combine_prs_of_all_chr.py \
--weighted_dosage /data100t1/home/wanying/BioVU/202405_PAGE_PRS/outputs/redo/flipped_dosage_weighted/HIS/HDL/HDL_PT_chr22.weighted_dosage.gz \
--ancestry EUR \
--pheno HDL \
--method PT \
--output_path /data100t1/home/wanying/BioVU/202405_PAGE_PRS/outputs \
--output_prefix ${ancestry}_${pheno}_${method}
'''

import pandas as pd
import numpy as np
import os
import argparse
import logging

# #################### Helper funcitons ####################

def setup_log(fn_log, mode='w'):
    '''
    Print log message to console and write to a log file.
    Will overwrite existing log file by default
    Params:
    - fn_log: name of the log file
    - mode: writing mode. Change mode='a' for appending
    '''
    # f string is not fully compatible with logging, so use %s for string formatting
    logging.root.handlers = [] # Remove potential handler set up by others (especially in google colab)
    logging.basicConfig(level=logging.DEBUG,
                        handlers=[logging.FileHandler(filename=fn_log, mode=mode),
                                  logging.StreamHandler()], format='%(message)s')

def process_args():
    '''
    Process arguments
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument('--weighted_dosage', help='Weighted dosage generated by get_weighted_dosage.py. Use chr22 to represent all chromosomes', type=str,
                        default='/data100t1/home/wanying/BioVU/202405_PAGE_PRS/outputs/redo/flipped_dosage_weighted/HIS/HDL/HDL_PT_chr22.weighted_dosage.gz')
    parser.add_argument('--ancestry', type=str, choices=['AFR', 'EAS', 'EUR', 'HIS', 'SAS'])
    parser.add_argument('--pheno', type=str, choices=['HDL', 'nonHDL', 'LDL', 'TC', 'logTG'])
    parser.add_argument('--method', type=str, choices=['PT', 'PRSCS'])
    parser.add_argument('--output_path', type=str, default='./')
    parser.add_argument('--output_prefix', type=str, default='output')
    args = parser.parse_args()
    
    if not os.path.isdir(args.output_path): # Create output folder if not exists
        os.makedirs(output_path)
    return args

# #################### Process arguments ####################
args = process_args()
fn_log = os.path.join(args.output_path, args.output_prefix+'.log')
setup_log(fn_log, mode='w')

# Record script used
cmd_used = 'python ' + os.path.basename(__file__)
logging.info('# Arguments used:')
for arg in vars(args):
    cmd_used += f' --{arg} {getattr(args, arg)}'
    msg = f'# - {arg}: {getattr(args, arg)}'
    logging.info(msg)
logging.info('\n# Call used:')
logging.info(cmd_used+'\n')

lst_data = []
for chr_num in range(1,23):
    print(f'\r# Process {chr_num}/22', end='', flush=True)
    fn = args.weighted_dosage.replace('chr22', f'chr{chr_num}')
    # lst_data.append(pd.read_csv(fn, sep='\t'))
    df = pd.read_csv(fn, sep='\t')
    prs = df.iloc[:, 5:].sum(axis=0)

df_prs = pd.concat(lst_data)
prs_all = df_prs.iloc[:, 4:].sum(axis=0) # Include total number of N

prs = prs_all.iloc[1:] / prs_all.iloc[0] # Divide by total number of SNPs

# Write output to file
output_fn = os.path.join(args.output_path, args.output_prefix) + '.all.prs'
if not os.path.isfile(output_fn): # Write header if output file does not exist
    fh = open(output_fn, 'w')
    fh.write('ANCESTRY\tPHENO\tMETHOD\tN\t')
    fh.write('\t'.join(df_prs.columns[5:]) + '\n')
else: # Append if file already exists
    fh = open(output_fn, 'a')

fh.write(f'{args.ancestry}\t{args.pheno}\t{args.method}\t{int(prs_all.iloc[0])}\t')
fh.write('\t'.join([str(val) for val in prs.values]) + '\n')
fh.close()


    

