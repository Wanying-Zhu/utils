# Author: Wanying Zhu

'''
Create volcano plot and QQ plot using result generated by linear_regression.py
Can be run from the commandline or imported as a library

Example run in terminal:
python plot_lr_result.py \
--input_file result/result.txt \
--output_path result \
--output_fn_prefix result \
--raw_pval_col pval \
--adjusted_pval_col pval_fdr pval_permute
'''


import pandas as pd
import matplotlib.pyplot as plt
import argparse
import os
import sys
sys.path.append('/data100t1/home/wanying/lab_code/utils')
from volcano_plot import volcano_plot
from QQplot_v6 import qqplot


# Load arguments
def get_args_and_sanity_checks():
    '''
    Load arguments from the commandline and check if they are valid
    '''
    # Load arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_file', type=str,
                        help='Result file from linear_regression.py, or customized result file with p values and adjusted p values. Can be a .csv file or tab delimited file')
    parser.add_argument('--output_path', type=str, default=None, help='Output directory')
    parser.add_argument('--output_fn_prefix', type=str, default=None, help='Prefix of the output figures')
    parser.add_argument('--beta_col', type=str, default='beta', help='Column name of betas (or fold changes)')
    parser.add_argument('--raw_pval_col', type=str, default='pval', help='Column name of raw p values')
    parser.add_argument('--adjusted_pval_col', type=str, nargs='*', help='Column name(s) of adjusted p values. Multiple columns are allowed')
    parser.add_argument('--verbose', action='store_true', help='Print more information. Default value is false')
    # parser.add_argument('--overwrite', action='store_true', help='Overwrite existing output file if true. Default value is false')
    args = parser.parse_args()

    # Sanity checks
    if not os.path.isfile(args.input_file): # Check if input file exists
        print('# ERROR: Input file not found: ' + args.input)
        exit()
    if not args.output_fn_prefix: args.output_fn_prefix = '.'.join(args.input_file.split('.')[:-1]) # Create default output file prefix if not provided
    if not args.output_path: args.output_path = './' # Set default output fold to current folder
    return args

def load_data(input_file, cols_to_check):
    '''
    load linear regression result
    Param:
    - input_file: file name of LR result
    - cols_to_check: column names of beta, raw p values and adjusted p values. Exit if one of them cannot be found in the data
    Return:
    - DataFrame of the result
    '''
    if input_file.endswith('.csv'):
        df_result = pd.read_csv(input_file)
    else:
        df_result = pd.read_csv(input_file, sep='\t')
    
    # Check if columns exist in the file
    for col in cols_to_check:
        if col not in df_result.columns:
            print('# ERROR: Column not found:', col)
            exit()
    return df_result

def plot_lr_result(df_result, raw_pval_col, adjusted_pval_col, beta_col, output_path, output_fn_prefix):
    '''
    Create volcano plots and QQ plots using linear regression result.
    Params:
    - df_result: Dataframe of result
    - raw_pval_col, adjusted_pval_col, beta_col: column names of raw p values, adjusted p values and beta (or fold change)
    - output_path, output_fn_prefix: output folder and file name prefix
    '''
    # Create volcano plots
    fig_volc, ax = plt.subplots(nrows=len(adjusted_pval_col), dpi=150, figsize=(5, 5*len(adjusted_pval_col)))
    if len(adjusted_pval_col)>1: # Multiple adjusted p values to use for plotting. ax is a numpy array of axes
        for i, adj_pval_col in enumerate(adjusted_pval_col): # Create separate plots using different adjusted p values
            volcano_plot(df=df_result, pval_col=raw_pval_col, fc_col=beta_col, log_fc=False,
                         pval_threshold_col=adj_pval_col, title=f'By {adj_pval_col}', fig=fig_volc, ax=ax[i])
    else: # Only one adjusted p value to use for plotting. ax is not a numpy array of axes
        volcano_plot(df=df_result, pval_col=raw_pval_col, fc_col=beta_col, log_fc=False, 
                     pval_threshold_col=adjusted_pval_col[0], title=f'By {adjusted_pval_col[0]}', fig=fig_volc, ax=ax)
    fig_volc.tight_layout()
    fig_volc.savefig(f'{output_path}/{output_fn_prefix}.volcano.png', format='png')
    print('# Valcano plot saved:', f'{output_path}/{output_fn_prefix}.volcano.png')
    
    # Creat QQ plots
    # Create QQ plot for raw p values
    f, a, _, _ = qqplot(filename=df_result, p_value_column_title=raw_pval_col, title=raw_pval_col, savefig=False)
    f.savefig(f'{output_path}/{output_fn_prefix}.qqplot.{raw_pval_col}.png', format='png')
    print('# QQ plot saved:', f'{output_path}/{output_fn_prefix}.qqplot.{raw_pval_col}.png')
    
    # Create QQ plots for adjusted p values
    fig_qq, ax = plt.subplots(nrows=len(adjusted_pval_col), dpi=150, figsize=(5, 5*len(adjusted_pval_col)))
    if len(adjusted_pval_col)>1: # Multiple adjusted p values to use for plotting. ax is a numpy array of axes
        for i, adj_pval_col in enumerate(adjusted_pval_col):
            qqplot(filename=df_result, p_value_column_title=adj_pval_col,
                   title=adj_pval_col, fig=fig_qq, ax=ax[i], savefig=False)
    else: # Only one adjusted p value to use for plotting. ax is not a numpy array of axes
        qqplot(filename=df_result, p_value_column_title=adjusted_pval_col[0], title=adjusted_pval_col[0],
               fig=fig_qq, ax=ax, savefig=False)
    fig_qq.tight_layout()
    fig_qq.savefig(f'{output_path}/{output_fn_prefix}.qqplot.adj_pvals.png', format='png')
    print('# QQ plot saved:', f'{output_path}/{output_fn_prefix}.qqplot.adj_pvals.png')

if __name__=='__main__':
    args = get_args_and_sanity_checks()
    print('# Arguments used')
    for arg in vars(args):
        print(f'# - {arg}: {getattr(args, arg)}')
    
    df_result = load_data(input_file=args.input_file, cols_to_check=[args.beta_col, args.raw_pval_col] + args.adjusted_pval_col)
    plot_lr_result(df_result, args.raw_pval_col, args.adjusted_pval_col, args.beta_col, args.output_path, args.output_fn_prefix)
